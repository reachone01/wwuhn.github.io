<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="utf-8">
<head>
<title>正则表达式入门教程（VBA）</title>
</head>
<style type="text/css">
#tbrowser a:link，.container a:visited{
font-size:18px;
text-decoration:none;
}
.container{
font-size:1.2em;
margin:auto;
font-family:"宋体";
width:75.29%;
line-height:1.6em;
}
P{
margin:16px;
text-indent:2em;
}
.uls{
color:#CC6666;
font-weight:bold;
}
.uls>ol{
list-style:none;
font-weight:normal;
list-style:lower-latin;
color:#000000;
line-height:1.3em;

}
h2{
font-size:20px;
font-weight:bold;
margin-top:15px;
margin-bottom:0px;
text-indent:0em;
}
img{
margin-right:5px;
}
.fc{
color:red;
}

a:link {
	text-decoration: none;
}


a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
a:active {
	text-decoration: none;
}


#goTopBtn {
	width: 18px;
    line-height: 1.2;
    padding: 5px 0;
    background-color:#eee;
    color:#000;
    font-size: 12px;
    text-align: center;
    position: fixed;
    _position: absolute;
 
    right: 10px;
    bottom: 100px;
    _bottom: "auto";
    cursor: pointer;
    opacity: .6;
    filter: Alpha(opacity=30);
	opacity=.3;
}
 #goTopBtn:hover{
 background-color:white;
 border:#ccc 1px solid;
 color:red;
 }
 
 
#goBottom {
	width: 18px;
    line-height: 1.2;
    padding: 5px 0;
    background-color: #eee;
    color: #fff;
    font-size: 12px;
    text-align: center;
    position: fixed;
    _position: absolute;
 
    right: 10px;
    bottom: 70px;
    _bottom: "auto";
    cursor: pointer;
    filter: Alpha(opacity=30);
	opacity=.3;
}
#goBottom:hover{
background-color:white;
border:#ccc 1px solid;
color:red;
}
 
#tbrowser {
	width:100%;
	margin:auto;
	border-collapse:collapse;
font-family:"宋体";
	text-align:left;
	line-height:1.3em;
	table-layout:fixed;
}

#tbrowser th,#tbrowser td{
border:1px solid #ddd;
font-size:1em;
color:#000000;
text-align:left;
font-family: "宋体";
vertical-align:top;
padding-left:3px;
}


#tbrowser thead th{
border-bottom:2px solid #3d580b;
background-color:#8fc629;
color:#fff;
padding:5px 0px;
}
#tbrowser .nd{
border-bottom:2px solid #3d580b;
background-color:#8fc629;
background-color:#D3D3A9;
color:red;
}

#tbrowser th{
border-bottom:2px solid #3d580b;
background-color:#8fc629;
color:#fff;
padding:5px 0px;
}
#tbrowser th.title{
background-color:#e3e685;
}

#tbrowser caption{
font-weight:bold;
padding:1px 0px;
color:#3d580b;
font-size:18px;
}


#tbrowser .xhx{
border-bottom:0px solid #aaa;
}


#tbrowser tr{
height:6px;
}

#tbrowser tr>td{/*1*/
font-size:1em;
text-align:left;
/*width:13%;*/
}
#tbrowser tr>td+td{/*2*/
text-align:left;
/*width:8%;*/
font-size:1em;
}
#tbrowser tr>td+td+td{/*3*/
font-size:1em;
/*width:5%;*/
}
#tbrowser tr>td+td+td+td{/*4*/
font-size:1em;
text-align:left;
/*width:6%;*/
}
#tbrowser tr>td+td+td+td+td{/*5*/
font-size:1em;
text-align:left;
/*width:5%;*/
}
#tbrowser tr>td+td+td+td+td+td{/*6*/
/*width:13%;*/
font-size:1em;
}
#tbrowser tr>td+td+td+td+td+td+td{/*7*/
/*width:59%;*/
font-size:1em;
}


#tbrowser tfoot td{
border-width:0px;
text-align:left;
line-height:18px;
font-size:16px;
color:#777;
}
.floatr{
float:right;
padding-right:5px;
}

#tbrowser th a:link {
	text-decoration: none;
	color:white;
}
#tbrowser th a:hover {
	text-decoration: none;
	color:white;
}
#tbrowser th a:active {
	text-decoration: none;
	color:white;
}
#tbrowser th a:visited {
	text-decoration: none;
	color:white;
}
#tbrowser caption{
font-size:1.2em;
text-align:left;
}
#tbrowser thead td{
font-size:0.8em;
text-align:left;
}
img{
border:0;
}
.picsay{
color:#930;
font-size:90%;
line-height:110%;
margin-top:-12px;
padding:0;
}

\s*<br />\s*
 
 
</p>

<p>
</style>
<body>



<div class="container">
<TABLE style="WIDTH: 100%" cellSpacing=1 cellPadding=1 align=center border=1>
<TBODY>
<TR>
<TD><STRONG><U><FONT color=#ff0000 size=2><A href=http://www.excelpx.com/thread-182675-1-1.html>Excel VBA入门视频教程80集（下载）</A></FONT></U></STRONG></TD>
<TD><U><STRONG><A href="http://item.taobao.com/item.htm?id=19010498628"  target=_blank>Excel数据透视表全套视频教程(28集)</A></STRONG></U></TD>
<TD><a href="http://www.amazon.cn/gp/product/B006FRBSIA/ref=as_li_tf_tl?ie=UTF8&tag=excelpx-23&linkCode=as2&camp=536&creative=3200&creativeASIN=B006FRBSIA">Excel VBA基础入门(第2版)</a><img src="http://www.assoc-amazon.cn/e/ir?t=excelpx-23&l=as2&o=28&a=B006FRBSIA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</TD></TR></TBODY></TABLE>


<h4>正则表达式入门教程（VBA）</h4>
		
<A href="http://item.taobao.com/item.htm?id=14402399879" target=_blank></A>
<H4><B>引言</B></H4>
<P>正则表达式（regular expression）就是用一个“字符串”来描述一个特征，然后去验证另一个“字符串”是否符合这个特征。比如 表达式“ab+” 描述的特征是“一个 'a' 和 任意个 'b' ”，那么 'ab', 'abb', 'abbbbbbbbbb' 都符合这个特征。</P>
<P>
</P>
<P>正则表达式可以用来：（1）验证字符串是否符合指定特征，比如验证是否是合法的邮件地址。（2）用来查找字符串，从一个长的文本中查找符合指定特征的字符串，比查找固定字符串更加灵活方便。（3）用来替换，比普通的替换更强大。</p>

<p></p>

<p>&nbsp;&nbsp; 正则表达式学习起来其实是很简单的，不多的几个较为抽象的概念也很容易理解。之所以很多人感觉正则表达式比较复杂，一方面是因为大多数的文档没有做到由浅入深地讲解，概念上没有注意先后顺序，给读者的理解带来困难；另一方面，各种引擎自带的文档一般都要介绍它特有的功能，然而这部分特有的功能并不是我们首先要理解的。</p>

<p></p>

<p>文章中的每一个举例，都可以点击进入到测试页面进行测试。闲话少说，开始。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H4>1. 正则表达式规则</H4>
<H5>1.1 普通字符</H5>
<P>字母、数字、汉字、下划线、以及后边章节中没有特殊定义的标点符号，都是"普通字符"。表达式中的普通字符，在匹配一个字符串的时候，匹配与之相同的一个字符。</p>

<p></p>

<p>举例1：表达式 "c"，在匹配字符串 "abcde" 时，匹配结果是：成功；匹配到的内容是："c"；匹配到的位置是：开始于2，结束于3。（注：下标从0开始还是从1开始，因当前编程语言的不同而可能不同）</p>

<p></p>

<p>举例2：表达式 "bcd"，在匹配字符串 "abcde" 时，匹配结果是：成功；匹配到的内容是："bcd"；匹配到的位置是：开始于1，结束于4。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>1.2 简单的转义字符</H5>
<P>一些不便书写的字符，采用在前面加 "\" 的方法。这些字符其实我们都已经熟知了。</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>可匹配</TD></TR>
<TR>
<TD>\r, \n</TD>
<TD>代表回车和换行符</TD></TR>
<TR>
<TD>\t</TD>
<TD>制表符</TD></TR>
<TR>
<TD>\\</TD>
<TD>代表 "\" 本身</TD></TR></TBODY></TABLE></P>
<P>还有其他一些在后边章节中有特殊用处的标点符号，在前面加 "\" 后，就代表该符号本身。比如：^, $ 都有特殊意义，如果要想匹配字符串中 "^" 和 "$" 字符，则表达式就需要写成 "\^" 和 "\$"。</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>可匹配</TD></TR>
<TR>
<TD>\^</TD>
<TD>匹配 ^ 符号本身</TD></TR>
<TR>
<TD>\$</TD>
<TD>匹配 $ 符号本身</TD></TR>
<TR>
<TD>\.</TD>
<TD>匹配小数点（.）本身</TD></TR></TBODY></TABLE></P>
<P>这些转义字符的匹配方法与 "普通字符" 是类似的。也是匹配与之相同的一个字符。</p>

<p></p>

<p>举例1：表达式 "\$d"，在匹配字符串 "abc$de" 时，匹配结果是：成功；匹配到的内容是："$d"；匹配到的位置是：开始于3，结束于5。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>1.3 能够与 '多种字符' 匹配的表达式</H5>
<P>正则表达式中的一些表示方法，可以匹配 '多种字符' 其中的任意一个字符。比如，表达式 "\d" 可以匹配任意一个数字。虽然可以匹配其中任意字符，但是只能是一个，不是多个。这就好比玩扑克牌时候，大小王可以代替任意一张牌，但是只能代替一张牌。</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>可匹配</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\d</FONT></FONT></SPAN></TD>
<TD>任意一个数字，0~9 中的任意一个</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\w</FONT></FONT></SPAN></TD>
<TD>任意一个字母或数字或下划线，也就是 A~Z,a~z,0~9,_ 中任意一个</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\s</FONT></FONT></SPAN></TD>
<TD>包括空格、制表符、换页符等空白字符的其中任意一个</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>.</FONT></FONT></SPAN></TD>
<TD>小数点可以匹配除了换行符（\n）以外的任意一个字符</TD></TR></TBODY></TABLE></P>
<P>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\d</FONT><FONT color=#900050>\d</FONT></FONT></SPAN>"，在匹配 "abc123" 时，匹配的结果是：成功；匹配到的内容是："12"；匹配到的位置是：开始于3，结束于5。</p>

<p></p>

<p>举例2：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>a<FONT color=#900050>.</FONT><FONT color=#900050>\d</FONT></FONT></SPAN>"，在匹配 "aaa100" 时，匹配的结果是：成功；匹配到的内容是："aa1"；匹配到的位置是：开始于1，结束于4。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>1.4 自定义能够匹配 '多种字符' 的表达式</H5>
<P>使用方括号 [ ] 包含一系列字符，能够匹配其中任意一个字符。用 [^ ] 包含一系列字符，则能够匹配其中字符之外的任意一个字符。同样的道理，虽然可以匹配其中任意一个，但是只能是一个，不是多个。</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>可匹配</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>[ab5@]</FONT></FONT></SPAN></TD>
<TD>匹配 "a" 或 "b" 或 "5" 或 "@"</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>[^abc]</FONT></FONT></SPAN></TD>
<TD>匹配 "a","b","c" 之外的任意一个字符</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>[f-k]</FONT></FONT></SPAN></TD>
<TD>匹配 "f"~"k" 之间的任意一个字母</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>[^A-F0-3]</FONT></FONT></SPAN></TD>
<TD>匹配 "A"~"F","0"~"3" 之外的任意一个字符</TD></TR></TBODY></TABLE></P>
<P>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>[bcd]</FONT><FONT color=#900050>[bcd]</FONT></FONT></SPAN>" 匹配 "abc123" 时，匹配的结果是：成功；匹配到的内容是："bc"；匹配到的位置是：开始于1，结束于3。</p>

<p></p>

<p>举例2：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>[^abc]</FONT></FONT></SPAN>" 匹配 "abc123" 时，匹配的结果是：成功；匹配到的内容是："1"；匹配到的位置是：开始于3，结束于4。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>1.5 修饰匹配次数的特殊符号</H5>
<P>前面章节中讲到的表达式，无论是只能匹配一种字符的表达式，还是可以匹配多种字符其中任意一个的表达式，都只能匹配一次。如果使用表达式再加上修饰匹配次数的特殊符号，那么不用重复书写表达式就可以重复匹配。</p>

<p></p>

<p>使用方法是："次数修饰"放在"被修饰的表达式"后边。比如："[bcd][bcd]" 可以写成 "[bcd]{2}"。</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>作用</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#e07000>{n}</FONT></FONT></SPAN></TD>
<TD>表达式重复n次，比如："\w{2}" 相当于 "\w\w"；"a{5}" 相当于 "aaaaa"</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#e07000>{m,n}</FONT></FONT></SPAN></TD>
<TD>表达式至少重复m次，最多重复n次，比如："ba{1,3}"可以匹配 "ba"或"baa"或"baaa"</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#e07000>{m,}</FONT></FONT></SPAN></TD>
<TD>表达式至少重复m次，比如："\w\d{2,}"可以匹配 "a12","_456","M12344"...</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#e07000>?</FONT></FONT></SPAN></TD>
<TD>匹配表达式0次或者1次，相当于 {0,1}，比如："a[cd]?"可以匹配 "a","ac","ad"</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#e07000>+</FONT></FONT></SPAN></TD>
<TD>表达式至少出现1次，相当于 {1,}，比如："a+b"可以匹配 "ab","aab","aaab"...</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#e07000>*</FONT></FONT></SPAN></TD>
<TD>表达式不出现或出现任意次，相当于 {0,}，比如："\^*b"可以匹配 "b","^^^b"...</TD></TR></TBODY></TABLE></P>
<P>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\d</FONT><FONT color=#e07000>+</FONT>\.<FONT color=#e07000>?</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>*</FONT></FONT></SPAN>" 在匹配 "It costs $12.5" 时，匹配的结果是：成功；匹配到的内容是："12.5"；匹配到的位置是：开始于10，结束于14。</p>

<p></p>

<p>举例2：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>go<FONT color=#e07000>{2,8}</FONT>gle</FONT></SPAN>" 在匹配 "Ads by goooooogle" 时，匹配的结果是：成功；匹配到的内容是："goooooogle"；匹配到的位置是：开始于7，结束于17。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>1.6 其他一些代表抽象意义的特殊符号</H5>
<P>一些符号在表达式中代表抽象的特殊意义：</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>作用</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>^</FONT></FONT></SPAN></TD>
<TD>与字符串开始的地方匹配，不匹配任何字符</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>$</FONT></FONT></SPAN></TD>
<TD>与字符串结束的地方匹配，不匹配任何字符</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>\b</FONT></FONT></SPAN></TD>
<TD>匹配一个单词边界，也就是单词和空格之间的位置，不匹配任何字符</TD></TR></TBODY></TABLE></P>
<P>进一步的文字说明仍然比较抽象，因此，举例帮助大家理解。</p>

<p></p>

<p>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>^</FONT>aaa</FONT></SPAN>" 在匹配 "xxx aaa xxx" 时，匹配结果是：失败。因为 "^" 要求与字符串开始的地方匹配，因此，只有当 "aaa" 位于字符串的开头的时候，"^aaa" 才能匹配，比如："aaa xxx xxx"。</p>

<p></p>

<p>举例2：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>aaa<FONT color=#ff00ff>$</FONT></FONT></SPAN>" 在匹配 "xxx aaa xxx" 时，匹配结果是：失败。因为 "$" 要求与字符串结束的地方匹配，因此，只有当 "aaa" 位于字符串的结尾的时候，"aaa$" 才能匹配，比如："xxx xxx aaa"。</p>

<p></p>

<p>举例3：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>.</FONT><FONT color=#ff00ff>\b</FONT><FONT color=#900050>.</FONT></FONT></SPAN>" 在匹配 "@@@abc" 时，匹配结果是：成功；匹配到的内容是："@a"；匹配到的位置是：开始于2，结束于4。</p>

<p>进一步说明："\b" 与 "^" 和 "$" 类似，本身不匹配任何字符，但是它要求它在匹配结果中所处位置的左右两边，其中一边是 "\w" 范围，另一边是 非"\w" 的范围。</p>

<p></p>

<p>举例4：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>\b</FONT>end<FONT color=#ff00ff>\b</FONT></FONT></SPAN>" 在匹配 "weekend,endfor,end" 时，匹配结果是：成功；匹配到的内容是："end"；匹配到的位置是：开始于15，结束于18。</P>
<P>一些符号可以影响表达式内部的子表达式之间的关系：</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>作用</TD></TR>
<TR>
<TD>|</TD>
<TD>左右两边表达式之间 "或" 关系，匹配左边或者右边</TD></TR>
<TR>
<TD>( )</TD>
<TD>(1). 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰</p>

<p>(2). 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到</TD></TR></TBODY></TABLE></P>
<P>举例5：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>Tom<FONT color=#5050ff>|</FONT>Jack</FONT></SPAN>" 在匹配字符串 "I'm Tom, he is Jack" 时，匹配结果是：成功；匹配到的内容是："Tom"；匹配到的位置是：开始于4，结束于7。匹配下一个时，匹配结果是：成功；匹配到的内容是："Jack"；匹配到的位置时：开始于15，结束于19。</p>

<p></p>

<p>举例6：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT>go<FONT color=#900050>\s</FONT><FONT color=#e07000>*</FONT><FONT color=#5050ff>)</FONT><FONT color=#e07000>+</FONT></FONT></SPAN>" 在匹配 "Let's go go go!" 时，匹配结果是：成功；匹配到内容是："go go go"；匹配到的位置是：开始于6，结束于14。</p>

<p></p>

<p>举例7：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>￥<FONT color=#5050ff>(</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>+</FONT>\.<FONT color=#e07000>?</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>*</FONT><FONT color=#5050ff>)</FONT></FONT></SPAN>" 在匹配 "＄10.9,￥20.5" 时，匹配的结果是：成功；匹配到的内容是："￥20.5"；匹配到的位置是：开始于6，结束于10。单独获取括号范围匹配到的内容是："20.5"。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H4>2. 正则表达式中的一些高级规则</H4>
<H5>2.1 匹配次数中的贪婪与非贪婪</H5>
<P>在使用修饰匹配次数的特殊符号时，有几种表示方法可以使同一个表达式能够匹配不同的次数，比如："{m,n}", "{m,}", "?", "*", "+"，具体匹配的次数随被匹配的字符串而定。这种重复匹配不定次数的表达式在匹配过程中，总是尽可能多的匹配。比如，针对文本 "dxxxdxxxd"，举例如下：</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>匹配结果</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT>d<FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#e07000>+</FONT><FONT color=#5050ff>)</FONT></FONT></SPAN></TD>
<TD>"\w+" 将匹配第一个 "d" 之后的所有字符 "xxxdxxxd"</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT>d<FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#e07000>+</FONT><FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT>d<FONT color=#5050ff>)</FONT></FONT></SPAN></TD>
<TD>"\w+" 将匹配第一个 "d" 和最后一个 "d" 之间的所有字符 "xxxdxxx"。虽然 "\w+" 也能够匹配上最后一个 "d"，但是为了使整个表达式匹配成功，"\w+" 可以 "让出" 它本来能够匹配的最后一个 "d"</TD></TR></TBODY></TABLE></P>
<P>由此可见，"\w+" 在匹配的时候，总是尽可能多的匹配符合它规则的字符。虽然第二个举例中，它没有匹配最后一个 "d"，但那也是为了让整个表达式能够匹配成功。同理，带 "*" 和 "{m,n}" 的表达式都是尽可能地多匹配，带 "?" 的表达式在可匹配可不匹配的时候，也是尽可能的 "要匹配"。这 种匹配原则就叫作 "贪婪" 模式 。</P>
<P>非贪婪模式：</p>

<p></p>

<p>在修饰匹配次数的特殊符号后再加上一个 "?" 号，则可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的 "不匹配"。这种匹配原则叫作 "非贪婪" 模式，也叫作 "勉强" 模式。如果少匹配就会导致整个表达式匹配失败的时候，与贪婪模式类似，非贪婪模式会最小限度的再匹配一些，以使整个表达式匹配成功。举例如下，针对文本 "dxxxdxxxd" 举例：</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>匹配结果</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT>d<FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#e07000>+</FONT><FONT color=#e07000>?</FONT><FONT color=#5050ff>)</FONT></FONT></SPAN></TD>
<TD>"\w+?" 将尽可能少的匹配第一个 "d" 之后的字符，结果是："\w+?" 只匹配了一个 "x"</TD></TR>
<TR>
<TD><SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT>d<FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#e07000>+</FONT><FONT color=#e07000>?</FONT><FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT>d<FONT color=#5050ff>)</FONT></FONT></SPAN></TD>
<TD>为了让整个表达式匹配成功，"\w+?" 不得不匹配 "xxx" 才可以让后边的 "d" 匹配，从而使整个表达式匹配成功。因此，结果是："\w+?" 匹配 "xxx"</TD></TR></TBODY></TABLE></P>
<P>更多的情况，举例如下：</p>

<p></p>

<p>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>&lt;td&gt;<FONT color=#5050ff>(</FONT><FONT color=#900050>.</FONT><FONT color=#e07000>*</FONT><FONT color=#5050ff>)</FONT>&lt;/td&gt;</FONT></SPAN>" 与字符串 "&lt;td&gt;&lt;p&gt;aa&lt;/p&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;bb&lt;/p&gt;&lt;/td&gt;" 匹配时，匹配的结果是：成功；匹配到的内容是 "&lt;td&gt;&lt;p&gt;aa&lt;/p&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;bb&lt;/p&gt;&lt;/td&gt;" 整个字符串， 表达式中的 "&lt;/td&gt;" 将与字符串中最后一个 "&lt;/td&gt;" 匹配。</p>

<p></p>

<p>举例2：相比之下，表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>&lt;td&gt;<FONT color=#5050ff>(</FONT><FONT color=#900050>.</FONT><FONT color=#e07000>*</FONT><FONT color=#e07000>?</FONT><FONT color=#5050ff>)</FONT>&lt;/td&gt;</FONT></SPAN>" 匹配举例1中同样的字符串时，将只得到 "&lt;td&gt;&lt;p&gt;aa&lt;/p&gt;&lt;/td&gt;"， 再次匹配下一个时，可以得到第二个 "&lt;td&gt;&lt;p&gt;bb&lt;/p&gt;&lt;/td&gt;"。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>2.2 反向引用 \1, \2...</H5>
<P>表达式在匹配时，表达式引擎会将小括号 "( )" 包含的表达式所匹配到的字符串记录下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。这一点，在前面的举例中，已经多次展示了。在实际应用场合中，当用某种边界来查找，而所要获取的内容又不包含边界时，必须使用小括号来指定所要的范围。比如前面的 "<SPAN id=pattern name="pattern"><FONT color=#000000>&lt;td&gt;<FONT color=#5050ff>(</FONT><FONT color=#900050>.</FONT><FONT color=#e07000>*</FONT><FONT color=#e07000>?</FONT><FONT color=#5050ff>)</FONT>&lt;/td&gt;</FONT></SPAN>"。</p>

<p></p>

<p>其实，"小括号包含的表达式所匹配到的字符串" 不仅是在匹配结束后才可以使用，在匹配过程中也可以使用。表达式后边的部分，可以引用前面 "括号内的子匹配已经匹配到的字符串"。引用方法是 "\" 加上一个数字。"\1" 引用第1对括号内匹配到的字符串，"\2" 引用第2对括号内匹配到的字符串……以此类推，如果一对括号内包含另一对括号，则外层的括号先排序号。换句话说，哪一对的左括号 "(" 在前，那这一对就先排序号。</P>
<P>举例如下：</p>

<p></p>

<p>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT>'<FONT color=#5050ff>|</FONT>"<FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>.</FONT><FONT color=#e07000>*</FONT><FONT color=#e07000>?</FONT><FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#5050ff>)</FONT></FONT></SPAN>" 在匹配 " 'Hello', "World" " 时，匹配结果是：成功；匹配到的内容是：" 'Hello' "。再次匹配下一个时，可以匹配到 " "World" "。</p>

<p></p>

<p>举例2：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#5050ff>)</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#e07000>{4,}</FONT></FONT></SPAN>" 在匹配 "aa bbbb abcdefg ccccc 111121111 999999999" 时，匹配结果是：成功；匹配到的内容是 "ccccc"。再次匹配下一个时，将得到 999999999。这个表达式要求 "\w" 范围的字符至少重复5次，注意与 "\w{5,}" 之间的区别。</p>

<p></p>

<p>举例3：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>&lt;<FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#e07000>+</FONT><FONT color=#5050ff>)</FONT><FONT color=#900050>\s</FONT><FONT color=#e07000>*</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#e07000>+</FONT><FONT color=#5050ff>(</FONT>=<FONT color=#5050ff>(</FONT>'<FONT color=#5050ff>|</FONT>"<FONT color=#5050ff>)</FONT><FONT color=#900050>.</FONT><FONT color=#e07000>*</FONT><FONT color=#e07000>?</FONT><FONT color=#ff00ff>\4</FONT><FONT color=#5050ff>)</FONT><FONT color=#e07000>?</FONT><FONT color=#900050>\s</FONT><FONT color=#e07000>*</FONT><FONT color=#5050ff>)</FONT><FONT color=#e07000>*</FONT>&gt;<FONT color=#900050>.</FONT><FONT color=#e07000>*</FONT><FONT color=#e07000>?</FONT>&lt;/<FONT color=#ff00ff>\1</FONT>&gt;</FONT></SPAN>" 在匹配 "&lt;td id='td1' style="bgcolor:white"&gt;&lt;/td&gt;" 时，匹配结果是成功。如果 "&lt;td&gt;" 与 "&lt;/td&gt;" 不配对，则会匹配失败；如果改成其他配对，也可以匹配成功。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H5>2.3 预搜索，不匹配；反向预搜索，不匹配</H5>
<P>前面的章节中，我讲到了几个代表抽象意义的特殊符号："^"，"$"，"\b"。它们都有一个共同点，那就是：它们本身不匹配任何字符，只是对 "字符串的两头" 或者 "字符之间的缝隙" 附加了一个条件。理解到这个概念以后，本节将继续介绍另外一种对 "两头" 或者 "缝隙" 附加条件的，更加灵活的表示方法。</P>
<P>正向预搜索："(?=xxxxx)"，"(?!xxxxx)"</p>

<p></p>

<p>格式："(?=xxxxx)"，在被匹配的字符串中，它对所处的 "缝隙" 或者 "两头" 附加的条件是：所在缝隙的右侧，必须能够匹配上 xxxxx 这部分的表达式。因为它只是在此作为这个缝隙上附加的条件，所以它并不影响后边的表达式去真正匹配这个缝隙之后的字符。这就类似 "\b"，本身不匹配任何字符。"\b" 只是将所在缝隙之前、之后的字符取来进行了一下判断，不会影响后边的表达式来真正的匹配。</p>

<p></p>

<p>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>Windows <FONT color=#999999>(?=</FONT>NT<FONT color=#5050ff>|</FONT>XP<FONT color=#999999>)</FONT></FONT></SPAN>" 在匹配 "Windows 98, Windows NT, Windows 2000" 时，将只匹配 "Windows NT" 中的 "Windows "，其他的 "Windows " 字样则不被匹配。</p>

<p></p>

<p>举例2：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#5050ff>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#999999>(?=</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#999999>)</FONT><FONT color=#5050ff>(</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#5050ff>)</FONT><FONT color=#5050ff>)</FONT><FONT color=#e07000>+</FONT></FONT></SPAN>" 在匹配字符串 "aaa ffffff 999999999" 时，将可以匹配6个"f"的前4个，可以匹配9个"9"的前7个。这个表达式可以读解成：重复4次以上的字母数字，则匹配其剩下最后2位之前的部分。当然，这个表达式可以不这样写，在此的目的是作为演示之用。</P>
<P>格式："(?!xxxxx)"，所在缝隙的右侧，必须不能匹配 xxxxx 这部分表达式。</p>

<p></p>

<p>举例3：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#5050ff>(</FONT><FONT color=#999999>(?!</FONT><FONT color=#ff00ff>\b</FONT>stop<FONT color=#ff00ff>\b</FONT><FONT color=#999999>)</FONT><FONT color=#900050>.</FONT><FONT color=#5050ff>)</FONT><FONT color=#e07000>+</FONT></FONT></SPAN>" 在匹配 "fdjka ljfdl stop fjdsla fdj" 时，将从头一直匹配到 "stop" 之前的位置，如果字符串中没有 "stop"，则匹配整个字符串。</p>

<p></p>

<p>举例4：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000>do<FONT color=#999999>(?!</FONT><FONT color=#900050>\w</FONT><FONT color=#999999>)</FONT></FONT></SPAN>" 在匹配字符串 "done, do, dog" 时，只能匹配 "do"。在本条举例中，"do" 后边使用 "(?!\w)" 和使用 "\b" 效果是一样的。</P>
<P>反向预搜索："(?&lt;=xxxxx)"，"(?&lt;!xxxxx)"</p>

<p></p>

<p>这两种格式的概念和正向预搜索是类似的，反向预搜索要求的条件是：所在缝隙的 "左侧"，两种格式分别要求必须能够匹配和必须不能够匹配指定表达式，而不是去判断右侧。与 "正向预搜索" 一样的是：它们都是对所在缝隙的一种附加条件，本身都不匹配任何字符。</p>

<p></p>

<p>举例5：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#999999>(?&lt;=</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>{4}</FONT><FONT color=#999999>)</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>+</FONT><FONT color=#999999>(?=</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>{4}</FONT><FONT color=#999999>)</FONT></FONT></SPAN>" 在匹配 "1234567890123456" 时，将匹配除了前4个数字和后4个数字之外的中间8个数字。由于 JScript.RegExp 不支持反向预搜索，因此，本条举例不能够进行演示。很多其他的引擎可以支持反向预搜索，比如：Java 1.4 以上的 java.util.regex 包，.NET 中System.Text.RegularExpressions 命名空间，以及本站推荐的最简单易用的 DEELX 正则引擎。</P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<H4>3. 其他通用规则</H4>
<P>还有一些在各个正则表达式引擎之间比较通用的规则，在前面的讲解过程中没有提到。</P>
<P>3.1 表达式中，可以使用 "\xXX" 和 "\uXXXX" 表示一个字符（"X" 表示一个十六进制数）</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>形式</TD>
<TD>字符范围</TD></TR>
<TR>
<TD>\xXX</TD>
<TD>编号在 0 ~ 255 范围的字符，比如：空格可以使用 "\x20" 表示</TD></TR>
<TR>
<TD>\uXXXX</TD>
<TD>任何字符可以使用 "\u" 再加上其编号的4位十六进制数表示，比如："\u4E2D"</TD></TR></TBODY></TABLE></P>
<P>3.2 在表达式 "\s"，"\d"，"\w"，"\b" 表示特殊意义的同时，对应的大写字母表示相反的意义</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式</TD>
<TD>可匹配</TD></TR>
<TR>
<TD>\S</TD>
<TD>匹配所有非空白字符（"\s" 可匹配各个空白字符）</TD></TR>
<TR>
<TD>\D</TD>
<TD>匹配所有的非数字字符</TD></TR>
<TR>
<TD>\W</TD>
<TD>匹配所有的字母、数字、下划线以外的字符</TD></TR>
<TR>
<TD>\B</TD>
<TD>匹配非单词边界，即左右两边都是 "\w" 范围或者左右两边都不是 "\w" 范围时的字符缝隙</TD></TR></TBODY></TABLE></P>
<P>3.3 在表达式中有特殊意义，需要添加 "\" 才能匹配该字符本身的字符汇总</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>字符</TD>
<TD>说明</TD></TR>
<TR>
<TD>^</TD>
<TD>匹配输入字符串的开始位置。要匹配 "^" 字符本身，请使用 "\^"</TD></TR>
<TR>
<TD>$</TD>
<TD>匹配输入字符串的结尾位置。要匹配 "$" 字符本身，请使用 "\$"</TD></TR>
<TR>
<TD>( )</TD>
<TD>标记一个子表达式的开始和结束位置。要匹配小括号，请使用 "\(" 和 "\)"</TD></TR>
<TR>
<TD>[ ]</TD>
<TD>用来自定义能够匹配 '多种字符' 的表达式。要匹配中括号，请使用 "\[" 和 "\]"</TD></TR>
<TR>
<TD>{ }</TD>
<TD>修饰匹配次数的符号。要匹配大括号，请使用 "\{" 和 "\}"</TD></TR>
<TR>
<TD>.</TD>
<TD>匹配除了换行符（\n）以外的任意一个字符。要匹配小数点本身，请使用 "\."</TD></TR>
<TR>
<TD>?</TD>
<TD>修饰匹配次数为 0 次或 1 次。要匹配 "?" 字符本身，请使用 "\?"</TD></TR>
<TR>
<TD>+</TD>
<TD>修饰匹配次数为至少 1 次。要匹配 "+" 字符本身，请使用 "\+"</TD></TR>
<TR>
<TD>*</TD>
<TD>修饰匹配次数为 0 次或任意次。要匹配 "*" 字符本身，请使用 "\*"</TD></TR>
<TR>
<TD>|</TD>
<TD>左右两边表达式之间 "或" 关系。匹配 "|" 本身，请使用 "\|"</TD></TR></TBODY></TABLE></P>
<P>3.4 括号 "( )" 内的子表达式，如果希望匹配结果不进行记录供以后使用，可以使用 "(?:xxxxx)" 格式</P>
<P>举例1：表达式 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#999999>(?:</FONT><FONT color=#5050ff>(</FONT><FONT color=#900050>\w</FONT><FONT color=#5050ff>)</FONT><FONT color=#ff00ff>\1</FONT><FONT color=#999999>)</FONT><FONT color=#e07000>+</FONT></FONT></SPAN>" 匹配 "a bbccdd efg" 时，结果是 "bbccdd"。括号 "(?:)" 范围的匹配结果不进行记录，因此 "(\w)" 使用 "\1" 来引用。</P>
<P>3.5 常用的表达式属性设置简介：Ignorecase，Singleline，Multiline，Global</P>
<P>
<TABLE style="BORDER-COLLAPSE: collapse" cellSpacing=0 cellPadding=3 bgColor=#f8f8f8 border=1>
<TBODY>
<TR bgColor=#f0f0f0>
<TD>表达式属性</TD>
<TD>说明</TD></TR>
<TR>
<TD>Ignorecase</TD>
<TD>默认情况下，表达式中的字母是要区分大小写的。配置为 Ignorecase 可使匹配时不区分大小写。有的表达式引擎，把 "大小写" 概念延伸至 UNICODE 范围的大小写。</TD></TR>
<TR>
<TD>Singleline</TD>
<TD>默认情况下，小数点 "." 匹配除了换行符（\n）以外的字符。配置为 Singleline 可使小数点可匹配包括换行符在内的所有字符。</TD></TR>
<TR>
<TD>Multiline</TD>
<TD>默认情况下，表达式 "^" 和 "$" 只匹配字符串的开始 ① 和结尾 ④ 位置。如：</p>

<p></p>

<p>①xxxxxxxxx②\n</p>

<p>③xxxxxxxxx④</p>

<p></p>

<p>配置为 Multiline 可以使 "^" 匹配 ① 外，还可以匹配换行符之后，下一行开始前 ③ 的位置，使 "$" 匹配 ④ 外，还可以匹配换行符之前，一行结束 ② 的位置。</TD></TR>
<TR>
<TD>Global</TD>
<TD>主要在将表达式用来替换时起作用，配置为 Global 表示替换所有的匹配。</TD></TR></TBODY></TABLE></P>
<P></P>
<P></P>
<HR color=#fea089 SIZE=1>

<P></P>
<P></P>
<H4>4. 其他提示</H4>
<P>4.1 如果想要了解高级的正则引擎还支持那些复杂的正则语法，可参见本站 DEELX 正则引擎的说明文档。</P>
<P>4.2 如果要要求表达式所匹配的内容是整个字符串，而不是从字符串中找一部分，那么可以在表达式的首尾使用 "^" 和 "$"，比如："<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>^</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>+</FONT><FONT color=#ff00ff>$</FONT></FONT></SPAN>" 要求整个字符串只有数字。</P>
<P>4.3 如果要求匹配的内容是一个完整的单词，而不会是单词的一部分，那么在表达式首尾使用 "\b"，比如：使用 "<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#ff00ff>\b</FONT><FONT color=#5050ff>(</FONT>if<FONT color=#5050ff>|</FONT>while<FONT color=#5050ff>|</FONT>else<FONT color=#5050ff>|</FONT>void<FONT color=#5050ff>|</FONT>int……<FONT color=#5050ff>)</FONT><FONT color=#ff00ff>\b</FONT></FONT></SPAN>" 来匹配程序中的关键字。</P>
<P>4.4 表达式不要匹配空字符串。否则会一直得到匹配成功，而结果什么都没有匹配到。比如：准备写一个匹配 "123"、"123."、"123.5"、".5" 这几种形式的表达式时，整数、小数点、小数数字都可以省略，但是不要将表达式写成："<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\d</FONT><FONT color=#e07000>*</FONT>\.<FONT color=#e07000>?</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>*</FONT></FONT></SPAN>"，因为如果什么都没有，这个表达式也可以匹配成功。更好的写法是："<SPAN id=pattern name="pattern"><FONT color=#000000><FONT color=#900050>\d</FONT><FONT color=#e07000>+</FONT>\.<FONT color=#e07000>?</FONT><FONT color=#900050>\d</FONT><FONT color=#e07000>*</FONT><FONT color=#5050ff>|</FONT>\.<FONT color=#900050>\d</FONT><FONT color=#e07000>+</FONT></FONT></SPAN>"。</P>
<P>4.5 能匹配空字符串的子匹配不要循环无限次。如果括号内的子表达式中的每一部分都可以匹配 0 次，而这个括号整体又可以匹配无限次，那么情况可能比上一条所说的更严重，匹配过程中可能死循环。虽然现在有些正则表达式引擎已经通过办法避免了这种情况出现死循环了，比如 .NET 的正则表达式，但是我们仍然应该尽量避免出现这种情况。如果我们在写表达式时遇到了死循环，也可以从这一点入手，查找一下是否是本条所说的原因。</P>
<P>4.6 合理选择贪婪模式与非贪婪模式，参见话题讨论。</P>
<P>4.7 或 "|" 的左右两边，对某个字符最好只有一边可以匹配，这样，不会因为 "|" 两边的表达式因为交换位置而有所不同。</P></p>

<TABLE id="tbrowser">
<col width="4%" />
<col width="48%" />
<col width="48%" />
<TBODY>
<TR>
<TH style="white-space:nowrap;">元字符</TH>
<TH>行为</TH>
<TH>示例</TH></TR>
<TR>
<TD>*</SPAN> </TD>
<TD>零次或多次匹配前面的字符或子表达式。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">{0,}</SPAN>。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">zo*</SPAN> 与“z”和“zoo”匹配。</SPAN> </TD></TR>
<TR>
<TD>+</SPAN> </TD>
<TD>一次或多次匹配前面的字符或子表达式。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">{1,}</SPAN>。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">zo+</SPAN> 与“zo”和“zoo”匹配，但与“z”不匹配。</SPAN> </TD></TR>
<TR>
<TD>?</SPAN> </TD>
<TD>零次或一次匹配前面的字符或子表达式。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">{0,1}</SPAN>。
<P>当 ?</SPAN> 紧随任何其他限定符（*、+、?、{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>}、{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>,} 或 {<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>,<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN>}）之后时，匹配模式是非贪婪的。</SPAN> 非贪婪模式匹配搜索到的、尽可能少的字符串，</SPAN> 而默认的贪婪模式匹配搜索到的、尽可能多的字符串。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">zo?</SPAN> 与“z”和“zo”匹配，但与“zoo”不匹配。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">o+?</SPAN> 只与“oooo”中的单个“o”匹配，而 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">o+</SPAN> 与所有“o”匹配。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">do(es)?</SPAN> 与“do”或“does”中的“do”匹配。</SPAN> </TD></TR>
<TR>
<TD>^</SPAN> </TD>
<TD>匹配搜索字符串开始的位置。</SPAN> 如果标志中包括 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">m</SPAN>（多行搜索）字符，^ 还将匹配 \n 或 \r 后面的位置。
<P>如果将 ^ 用作括号表达式中的第一个字符，则会对字符集求反。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">^\d{3}</SPAN> 与搜索字符串开始处的 3 个数字匹配。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[^abc]</SPAN> 与除 a、b 和 c 以外的任何字符匹配。</SPAN> </TD></TR>
<TR>
<TD>$</SPAN> </TD>
<TD>匹配搜索字符串结尾的位置。</SPAN> 如果标志中包括 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">m</SPAN>（多行搜索）字符，^ 还将匹配 \n 或 \r 前面的位置。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\d{3}$</SPAN> 与搜索字符串结尾处的 3 个数字匹配。</SPAN> </TD></TR>
<TR>
<TD>.</SPAN> </TD>
<TD>匹配除换行符 \n 之外的任何单个字符。</SPAN> 若要匹配包括 \n 在内的任意字符，请使用诸如 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[\s\S]</SPAN> 之类的模式。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">a.c</SPAN> 与“abc”、“a1c”和“a-c”匹配。</SPAN> </TD></TR>
<TR>
<TD>[]</SPAN> </TD>
<TD>标记括号表达式的开始和结尾。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[1-4]</SPAN> 与“1”、“2”、“3”或“4”匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[^aAeEiIoOuU]</SPAN> 与任何非元音字符匹配。</SPAN> </TD></TR>
<TR>
<TD>{}</SPAN> </TD>
<TD>标记限定符表达式的开始和结尾。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">a{2,3}</SPAN> 与“aa”和“aaa”匹配。</SPAN> </TD></TR>
<TR>
<TD>()</SPAN> </TD>
<TD>标记子表达式的开始和结尾。</SPAN> 可以保存子表达式以备将来之用。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">A(\d)</SPAN> 与“A0”至“A9”匹配。</SPAN> 保存该数字以备将来之用。</SPAN> </TD></TR>
<TR>
<TD>|</TD>
<TD>指示在两个或多个项之间进行选择。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">z|food</SPAN> 与“z”或“food”匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">(z|f)ood</SPAN> 与“zood”或“food”匹配。</SPAN> </TD></TR>
<TR>
<TD>/</SPAN> </TD>
<TD>表示 JScript 中的文本正则表达式模式的开始或结尾。</SPAN> 在第二个“/”后添加单字符标志可以指定搜索行为。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">/abc/gi</SPAN> 是与“abc”匹配的 JScript 文本正则表达式。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">g</SPAN>（全局）标志指定查找模式的所有匹配项，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">i</SPAN>（忽略大小写）标志使搜索不区分大小写。</SPAN> </TD></TR>
<TR>
<TD>\</SPAN> </TD>
<TD>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\n</SPAN> 与换行符匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\(</SPAN> 与“(”匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\\</SPAN> 与“\”匹配。</SPAN> </TD></TR></TBODY></TABLE>

<p>下表包含了多字符元字符的列表以及它们在正则表达式中的行为。</p>
<TABLE id="tbrowser">
<col width="4%" />
<col width="48%" />
<col width="48%" />
<TBODY>
<TR>
<TH style="white-space:nowrap">元字符</TH>
<TH>行为</TH>
<TH>示例</TH></TR>
<TR>
<TD>\b</SPAN> </TD>
<TD>与一个字边界匹配；即字与空格间的位置。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">er\b</SPAN> 与“never”中的“er”匹配，但与“verb”中的“er”不匹配。</SPAN> </TD></TR>
<TR>
<TD>\B</SPAN> </TD>
<TD>非边界字匹配。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">er\B</SPAN> 与“verb”中的“er”匹配，但与“never”中的“er”不匹配。</SPAN> </TD></TR>
<TR>
<TD>\d</SPAN> </TD>
<TD>数字字符匹配。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[0-9]</SPAN>。</SPAN> </TD>
<TD>在搜索字符串“12 345”中，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\d{2}</SPAN> 与“12”和“34”匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\d</SPAN> 与“1”、“2”、“3”、“4”和“5”匹配。</SPAN> </TD></TR>
<TR>
<TD>\D</SPAN> </TD>
<TD>非数字字符匹配。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[^0-9]</SPAN>。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\D+</SPAN> 与“abc123 def”中的“abc”和“def”匹配。</SPAN> </TD></TR>
<TR>
<TD>\w</SPAN> </TD>
<TD>与以下任意字符匹配：A-Z、a-z、0-9 和下划线。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[A-Za-z0-9_]</SPAN>。</SPAN> </TD>
<TD>在搜索字符串“The quick brown fox…”中，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\w+</SPAN> 与“The”、“quick”、“brown”和“fox”匹配。</SPAN> </TD></TR>
<TR>
<TD>\W</SPAN> </TD>
<TD>与除 A-Z、a-z、0-9 和下划线以外的任意字符匹配。
<P>等效于 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[^A-Za-z0-9_]</SPAN>。</SPAN> </TD>
<TD>在搜索字符串“The quick brown fox…”中，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\W+</SPAN> 与“…”和所有空格匹配。</SPAN> </TD></TR>
<TR>
<TD>[<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>xyz</EM></SPAN>]</SPAN> </TD>
<TD>字符集。</SPAN> 与任何一个指定字符匹配。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[abc]</SPAN> 与“plain”中的“a”匹配。</SPAN> </TD></TR>
<TR>
<TD>[<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>^xyz</EM></SPAN>]</SPAN> </TD>
<TD>反向字符集。</SPAN> 与未指定的任何字符匹配。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[^abc]</SPAN> 与“plain”中的“p”、“l”、“i”和“n”匹配。</SPAN> </TD></TR>
<TR>
<TD>[<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>a</EM></SPAN>-<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>z</EM></SPAN>]</SPAN> </TD>
<TD>字符范围。</SPAN> 匹配指定范围内的任何字符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[a-z]</SPAN> 与“a”到“z”范围内的任何小写字母字符匹配。</SPAN> </TD></TR>
<TR>
<TD>[^<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>a</EM></SPAN>-<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>z</EM></SPAN>]</SPAN> </TD>
<TD>反向字符范围。</SPAN> 与不在指定范围内的任何字符匹配。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">[^a-z]</SPAN> 与不在范围“a”到“z”内的任何字符匹配。</SPAN> </TD></TR>
<TR>
<TD>{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>}</SPAN> </TD>
<TD>正好匹配 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 次。</SPAN> <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n </EM></SPAN>是非负整数。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">o{2}</SPAN> 与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。</SPAN> </TD></TR>
<TR>
<TD>{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>,}</SPAN> </TD>
<TD>至少匹配 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n </EM></SPAN>次。</SPAN> <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n </EM></SPAN>是非负整数。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">*</SPAN> 与 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">{0,}</SPAN> 相等。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">+</SPAN> 与 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">{1,}</SPAN> 相等。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">o{2,}</SPAN> 与“Bob”中的“o”不匹配，但与“foooood”中的所有“o”匹配。</SPAN> </TD></TR>
<TR>
<TD>{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>,<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN>}</SPAN> </TD>
<TD>匹配至少 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 次，至多 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN> 次。</SPAN> <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 和 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN> 是非负整数，其中 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> &lt;= <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN>。</SPAN> 逗号和数字之间不能有空格。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">?</SPAN> 与 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">{0,1}</SPAN> 相等。</SPAN> </TD>
<TD>在搜索字符串“1234567”中，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\d{1,3}</SPAN> 与“123”、“456”和“7”匹配。</SPAN> </TD></TR>
<TR>
<TD>(<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN>)</SPAN> </TD>
<TD>与<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN> 匹配并保存匹配项。</SPAN> 您可以从由 JScript 中的 <SPAN xmlns="http://www.w3.org/1999/xhtml"><SPAN class=input>exec Method</SPAN></SPAN>返回的数组元素中检索保存的匹配项。</SPAN> 若要匹配括号字符 ( )，请使用“\(”或者“\)”。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">(Chapter|Section) [1-9]</SPAN> 与“Chapter 5”匹配，保存“Chapter”以备将来之用。</SPAN> </TD></TR>
<TR>
<TD>(?:<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN>)</SPAN> </TD>
<TD>与<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN> 匹配，但不保存匹配项；即不会存储匹配项以备将来之用。</SPAN> 这对于用“or”字符 (|) 组合模式部件的情况很有用。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">industr(?:y|ies)</SPAN> 与 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">industry|industries</SPAN> 相等。</SPAN> </TD></TR>
<TR>
<TD>(?=<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN>)</SPAN> </TD>
<TD>正预测先行。</SPAN> 找到一个匹配项后，将在匹配文本之前开始搜索下一个匹配项。</SPAN> 不会保存匹配项以备将来之用。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">^(?=.*\d).{4,8}$</SPAN> 对密码应用以下限制：其长度必须介于 4 到 8 个字符之间，并且必须至少包含一个数字。
<P>在该模式中，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">.*\d</SPAN> 查找后跟有数字的任意多个字符。</SPAN> 对于搜索字符串“abc3qr”，这与“abc3”匹配。
<P>从该匹配项之前（而不是之后）开始，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">.{4,8}</SPAN> 与包含 4-8 个字符的字符串匹配。</SPAN> 这与“abc3qr”匹配。
<P><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">^</SPAN> 和 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">$</SPAN> 指定搜索字符串的开始和结束位置。</SPAN> 这将在搜索字符串包含匹配字符之外的任何字符时阻止匹配。</SPAN> </TD></TR>
<TR>
<TD>(?!<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN>)</SPAN> </TD>
<TD>负预测先行。</SPAN> 匹配与<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>模式</EM></SPAN> 不匹配的搜索字符串。</SPAN> 找到一个匹配项后，将在匹配文本之前开始搜索下一个匹配项。</SPAN> 不会保存匹配项以备将来之用。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\b(?!th)\w+\b</SPAN> 与不以“th”开头的单词匹配。
<P>在该模式中，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\b</SPAN> 与一个字边界匹配。</SPAN> 对于搜索字符串“ quick ”，这与第一个空格匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">(?!th)</SPAN> 与非“th”字符串匹配。</SPAN> 这与“qu”匹配。
<P>从该匹配项开始，<SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\w+</SPAN> 与一个字匹配。</SPAN> 这与“quick”匹配。</SPAN> </TD></TR>
<TR>
<TD>\c<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>x</EM></SPAN></SPAN> </TD>
<TD>匹配 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>x</EM></SPAN> 指示的控制字符。</SPAN> <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>x</EM></SPAN> 的值必须在 A-Z 或 a-z 范围内。</SPAN> 如果不是这样，则假定 c 就是文本“c”字符本身。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\cM</SPAN> 与 Ctrl+M 或一个回车符匹配。</SPAN> </TD></TR>
<TR>
<TD>\x<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN></SPAN> </TD>
<TD>匹配 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>，此处的 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是一个十六进制转义码。</SPAN> 十六进制转义码必须正好是两位数长。</SPAN> 允许在正则表达式中使用 ASCII 代码。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x41</SPAN> 与“A”匹配。</SPAN> <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x041</SPAN> 等效于后跟有“1”的“\x04”（因为 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 必须正好是两位数）。</SPAN> </TD></TR>
<TR>
<TD>\<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>num</EM></SPAN></SPAN> </TD>
<TD>匹配 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>num</EM></SPAN>，此处的 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>num</EM></SPAN> 是一个正整数。</SPAN> 这是对已保存的匹配项的引用。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">(.)\1</SPAN> 与两个连续的相同字符匹配。</SPAN> </TD></TR>
<TR>
<TD>\<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN></SPAN> </TD>
<TD>标识一个八进制转义码或反向引用。</SPAN> 如果 \<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 前面至少有 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 个捕获子表达式，那么 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是反向引用。</SPAN> 否则，如果 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是八进制数 (0-7)，那么 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是八进制转义码。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">(\d)\1</SPAN> 与两个连续的相同数字匹配。</SPAN> </TD></TR>
<TR>
<TD>\<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN></SPAN> </TD>
<TD>标识一个八进制转义码或反向引用。</SPAN> 如果 \<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN> 前面至少有 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN> 个捕获子表达式，那么 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN> 是反向引用。</SPAN> 如果 \<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN> 前面至少有 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 个捕获子表达式，则 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是反向引用，后面跟有文本 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN>。</SPAN> 如果上述情况都不存在，当 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 和 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN> 是八进制数字 (0-7) 时，\<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN> 匹配八进制转义码 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nm</EM></SPAN>。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\11</SPAN> 与制表符匹配。</SPAN> </TD></TR>
<TR>
<TD>\<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nml</EM></SPAN></SPAN> </TD>
<TD>当 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是八进制数字 (0-3)，<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN> 和 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>l</EM></SPAN> 是八进制数字 (0-7) 时，匹配八进制转义码 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>nml</EM></SPAN>。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\011</SPAN> 与制表符匹配。</SPAN> </TD></TR>
<TR>
<TD>\u<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN></SPAN> </TD>
<TD>匹配 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>，其中 <SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN> 是以四位十六进制数表示的 Unicode 字符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\u00A9</SPAN> 与版权符号 (&copy;) 匹配。</SPAN> </TD></TR></TBODY></TABLE>

下表包含表示非打印字符的转义序列。
<TABLE id="tbrowser">
<col width="4%" />
<col width="48%" />
<col width="48%" />
<TBODY>
<TR>
<TH style="white-space:nowrap">字符</TH>
<TH>匹配</TH>
<TH>等效于</TH></TR>
<TR>
<TD>\f</SPAN> </TD>
<TD>换页符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x0c</SPAN> 和 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\cL</SPAN></SPAN> </TD></TR>
<TR>
<TD>\n</SPAN> </TD>
<TD>换行符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x0a</SPAN> 和 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\cJ</SPAN></SPAN> </TD></TR>
<TR>
<TD>\r</SPAN> </TD>
<TD>回车符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x0d</SPAN> 和 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\cM</SPAN></SPAN> </TD></TR>
<TR>
<TD>\s</SPAN> </TD>
<TD>任何空白字符。</SPAN> 其中包括空格、制表符和换页符。</SPAN> </TD>
<TD><SPAN class=code>[ \f\n\r\t\v]</SPAN> </TD></TR>
<TR>
<TD>\S</SPAN> </TD>
<TD>任何非空白字符。</SPAN> </TD>
<TD><SPAN class=code>[^ \f\n\r\t\v]</SPAN> </TD></TR>
<TR>
<TD>\t</SPAN> </TD>
<TD>Tab 字符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x09</SPAN> 和 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\cI</SPAN></SPAN> </TD></TR>
<TR>
<TD>\v</SPAN> </TD>
<TD>垂直制表符。</SPAN> </TD>
<TD><SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\x0b</SPAN> 和 <SPAN class=code xmlns="http://www.w3.org/1999/xhtml">\cK</SPAN></SPAN> </TD></TR></TBODY></TABLE>

<A id=sectionToggle3 xmlns="http://www.w3.org/1999/xhtml"></A>
<P xmlns="http://www.w3.org/1999/xhtml">正则表达式的计算方式与算术表达式非常类似；即从左到右进行计算，并遵循优先级顺序。
<P xmlns="http://www.w3.org/1999/xhtml">下表按从高到低的顺序包含了正则表达式运算符的优先级顺序。

<TABLE id="tbrowser">

<col width="48%" />
<col width="48%" />
<TBODY>
<TR>
<TH style="white-space:nowrap">运算符</TH>

<TH>说明</TH></TR>
<TR>
<TD>\</SPAN> </TD>
<TD>转义符</SPAN> </TD></TR>
<TR>
<TD>(), (?:), (?=), []</SPAN> </TD>
<TD>括号和中括号</SPAN> </TD></TR>
<TR>
<TD>*、+、?、{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>}、{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>,}、{<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>n</EM></SPAN>,<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>m</EM></SPAN>}</SPAN> </TD>
<TD>限定符</SPAN> </TD></TR>
<TR>
<TD>^、$、\<SPAN class=parameter xmlns="http://www.w3.org/1999/xhtml"><EM>任何元字符</EM></SPAN></SPAN> </TD>
<TD><SPAN class="sentence SentenceHover" id=xn227_5eeabeef43e53a67112d09b3e0345603 jQuery1608733465208087994="231"><FONT style="BACKGROUND-COLOR: #ffffe1">定位点和序列</FONT></SPAN> </TD></TR>
<TR>
<TD>|</TD>
<TD>替换</SPAN> </TD></TR></TBODY></TABLE>
		
		

</div>
</body>
</html>